
/*
 +------------------------------------------------------------------------+
 |                       ___  ___ ___ _ __   ___                          |
 |                      / __|/ __/ _ \  _ \ / _ \                         |
 |                      \__ \ (_|  __/ | | |  __/                         |
 |                      |___/\___\___|_| |_|\___|                         |
 |                                                                        |
 +------------------------------------------------------------------------+
 | Copyright (c) 2015-2016 Scene Team (http://mcorce.com)                 |
 +------------------------------------------------------------------------+
 | This source file is subject to the MIT License that is bundled         |
 | with this package in the file docs/LICENSE.txt.                        |
 |                                                                        |
 | If you did not receive a copy of the license and are unable to         |
 | obtain it through the world-wide-web, please send an email             |
 | to scene@mcorce.com so we can send you a copy immediately.             |
 +------------------------------------------------------------------------+
 | Authors: DangCheng <dangcheng@hotmail.com>                             |
 +------------------------------------------------------------------------+
 */

namespace Scene\Mvc\Collection;

use Scene\Mvc\Collection\Message;

/**
 * Scene\Mvc\Collection\Validator
 *
 * This is a base class for Scene\Mvc\Collection validators
 */
abstract class Validator
{

	/**
     * Options
     *
     * @var null|array
     * @access protected
    */
	protected _options;

	/**
     * Messages
     *
     * @var null|array
     * @access protected
    */
	protected _messages;

	/**
	 * Scene\Mvc\Collection\Validator constructor
	 *
	 * @param array options
     * @throws Exception
	 */
	public function __construct(array! options)
	{
		let this->_options = options;
	}

	/**
	 * Appends a message to the validator
	 *
	 * @param string message
	 * @param string|array field
	 * @param string type
	 */
	protected function appendMessage(string! message, field = null, type = null)
	{
		if !type {
			let type = str_replace("Validator", "", get_class(this));
		}
		let this->_messages[] = new Message(message, field, type);
	}

	/**
	 * Returns messages generated by the validator
	 *
	 * @return array|null
	 */
	public function getMessages() -> array
	{
		return this->_messages;
	}

	/**
	 * Returns all the options from the validator
	 *
	 * @return array
	 */
	public function getOptions()
	{
		return this->_options;
	}

	/**
	 * Returns an option
	 *
	 * @param string option
     * @return mixed
	 */
	public function getOption(string! option, var defaultValue = "") -> var
	{
		var options, value;
		let options = this->_options;
		if fetch value, options[option] {
			return value;
		}
		return defaultValue;
	}

	/**
	 * Check whether a option has been defined in the validator options
	 *
	 * @param string option
     * @return boolean
	 */
	public function isSetOption(string! option) -> boolean
	{
		return isset this->_options[option];
	}
}
